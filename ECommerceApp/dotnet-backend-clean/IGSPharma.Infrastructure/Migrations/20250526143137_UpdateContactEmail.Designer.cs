// <auto-generated />
using System;
using IGSPharma.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IGSPharma.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250526143137_UpdateContactEmail")]
    partial class UpdateContactEmail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IGSPharma.Domain.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BillingAddressId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsFirstOrder")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LoyaltyPointsEarned")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ShippingAddressId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.OrderAuditLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderAuditLog");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDiscountApplied")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PrescriptionId")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.Prescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DigitalSignature")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DoctorLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PrescriptionNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.PrescriptionItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PrescriptionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Refills")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("PrescriptionItems");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ActiveIngredients")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Dosage")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("InStock")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RegulatoryApprovalNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("RequiresPrescription")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "prescription-1",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "prescription",
                            Description = "Lisinopril 20mg is a prescription medication that requires a valid prescription from a licensed healthcare provider.",
                            Dosage = "3 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=prescription+1",
                            InStock = true,
                            Manufacturer = "CureTech",
                            Name = "Lisinopril 20mg",
                            Price = 59.23m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = true,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "prescription-2",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "prescription",
                            Description = "Atorvastatin 30mg is a prescription medication that requires a valid prescription from a licensed healthcare provider.",
                            Dosage = "1 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=prescription+2",
                            InStock = false,
                            Manufacturer = "PharmaCorp",
                            Name = "Atorvastatin 30mg",
                            Price = 46.94m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = true,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "prescription-3",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "prescription",
                            Description = "Levothyroxine 40mg is a prescription medication that requires a valid prescription from a licensed healthcare provider.",
                            Dosage = "3 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=prescription+3",
                            InStock = true,
                            Manufacturer = "HealthRx",
                            Name = "Levothyroxine 40mg",
                            Price = 19.74m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = true,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "prescription-4",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "prescription",
                            Description = "Metformin 50mg is a prescription medication that requires a valid prescription from a licensed healthcare provider.",
                            Dosage = "1 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=prescription+4",
                            InStock = true,
                            Manufacturer = "CureTech",
                            Name = "Metformin 50mg",
                            Price = 19.46m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = true,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "prescription-5",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "prescription",
                            Description = "Amlodipine 60mg is a prescription medication that requires a valid prescription from a licensed healthcare provider.",
                            Dosage = "1 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=prescription+5",
                            InStock = true,
                            Manufacturer = "CureTech",
                            Name = "Amlodipine 60mg",
                            Price = 38.33m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = true,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "otc-1",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "otc",
                            Description = "Ibuprofen 200mg is an over-the-counter medication for temporary relief of minor aches and pains.",
                            Dosage = "3 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=otc+1",
                            InStock = false,
                            Manufacturer = "ConsumerHealth",
                            Name = "Ibuprofen 200mg",
                            Price = 18.00m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "otc-2",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "otc",
                            Description = "Acetaminophen 300mg is an over-the-counter medication for temporary relief of minor aches and pains.",
                            Dosage = "3 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=otc+2",
                            InStock = true,
                            Manufacturer = "ComfortPharm",
                            Name = "Acetaminophen 300mg",
                            Price = 47.73m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "otc-3",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "otc",
                            Description = "Aspirin 400mg is an over-the-counter medication for temporary relief of minor aches and pains.",
                            Dosage = "2 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=otc+3",
                            InStock = false,
                            Manufacturer = "ComfortPharm",
                            Name = "Aspirin 400mg",
                            Price = 36.05m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "otc-4",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "otc",
                            Description = "Loratadine 500mg is an over-the-counter medication for temporary relief of minor aches and pains.",
                            Dosage = "2 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=otc+4",
                            InStock = false,
                            Manufacturer = "ConsumerHealth",
                            Name = "Loratadine 500mg",
                            Price = 47.92m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "otc-5",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "otc",
                            Description = "Cetirizine 600mg is an over-the-counter medication for temporary relief of minor aches and pains.",
                            Dosage = "2 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=otc+5",
                            InStock = true,
                            Manufacturer = "DailyHealth",
                            Name = "Cetirizine 600mg",
                            Price = 55.87m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "vitamins-1",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "vitamins",
                            Description = "Vitamin D3 1000IU helps support overall health and wellness as part of a balanced diet.",
                            Dosage = "2 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=vitamins+1",
                            InStock = true,
                            Manufacturer = "NaturalHealth",
                            Name = "Vitamin D3 1000IU",
                            Price = 56.59m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "vitamins-2",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "vitamins",
                            Description = "Vitamin B12 1500IU helps support overall health and wellness as part of a balanced diet.",
                            Dosage = "1 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=vitamins+2",
                            InStock = false,
                            Manufacturer = "VitaEssentials",
                            Name = "Vitamin B12 1500IU",
                            Price = 47.86m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "vitamins-3",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "vitamins",
                            Description = "Multivitamin 2000IU helps support overall health and wellness as part of a balanced diet.",
                            Dosage = "3 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=vitamins+3",
                            InStock = true,
                            Manufacturer = "NaturalHealth",
                            Name = "Multivitamin 2000IU",
                            Price = 18.16m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "vitamins-4",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "vitamins",
                            Description = "Vitamin C 2500IU helps support overall health and wellness as part of a balanced diet.",
                            Dosage = "3 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=vitamins+4",
                            InStock = true,
                            Manufacturer = "WellnessPlus",
                            Name = "Vitamin C 2500IU",
                            Price = 10.55m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "vitamins-5",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "vitamins",
                            Description = "Omega-3 3000IU helps support overall health and wellness as part of a balanced diet.",
                            Dosage = "1 tablet(s) daily",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=vitamins+5",
                            InStock = true,
                            Manufacturer = "NaturalHealth",
                            Name = "Omega-3 3000IU",
                            Price = 16.41m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "personal-care-1",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "personal-care",
                            Description = "Hand Sanitizer is designed for daily personal hygiene and self-care.",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=personal-care+1",
                            InStock = false,
                            Manufacturer = "HygieneFirst",
                            Name = "Hand Sanitizer",
                            Price = 28.16m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "personal-care-2",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "personal-care",
                            Description = "Moisturizing Lotion is designed for daily personal hygiene and self-care.",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=personal-care+2",
                            InStock = false,
                            Manufacturer = "CareProducts",
                            Name = "Moisturizing Lotion",
                            Price = 12.72m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "personal-care-3",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "personal-care",
                            Description = "Sunscreen is designed for daily personal hygiene and self-care.",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=personal-care+3",
                            InStock = false,
                            Manufacturer = "CleanLiving",
                            Name = "Sunscreen",
                            Price = 46.84m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "personal-care-4",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "personal-care",
                            Description = "Dental Floss is designed for daily personal hygiene and self-care.",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=personal-care+4",
                            InStock = true,
                            Manufacturer = "DailyCare",
                            Name = "Dental Floss",
                            Price = 59.26m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = "personal-care-5",
                            ActiveIngredients = "[]",
                            Barcode = "",
                            Category = "personal-care",
                            Description = "Antiseptic Spray is designed for daily personal hygiene and self-care.",
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://placehold.co/200x200?text=personal-care+5",
                            InStock = true,
                            Manufacturer = "CareProducts",
                            Name = "Antiseptic Spray",
                            Price = 52.41m,
                            RegulatoryApprovalNumber = "",
                            RequiresPrescription = false,
                            StockQuantity = 0
                        });
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.ProductBatch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ManufacturingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBatch");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("PrescriptionAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.Address", b =>
                {
                    b.HasOne("IGSPharma.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.Order", b =>
                {
                    b.HasOne("IGSPharma.Domain.Entities.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IGSPharma.Domain.Entities.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IGSPharma.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingAddress");

                    b.Navigation("ShippingAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.OrderAuditLog", b =>
                {
                    b.HasOne("IGSPharma.Domain.Entities.Order", "Order")
                        .WithMany("AuditLogs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("IGSPharma.Domain.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IGSPharma.Domain.Entities.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IGSPharma.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Prescription");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("IGSPharma.Domain.Entities.User", "User")
                        .WithMany("Prescriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.PrescriptionItem", b =>
                {
                    b.HasOne("IGSPharma.Domain.Entities.Prescription", "Prescription")
                        .WithMany("Items")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IGSPharma.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.ProductBatch", b =>
                {
                    b.HasOne("IGSPharma.Domain.Entities.Product", "Product")
                        .WithMany("Batches")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.Order", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.Prescription", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.Product", b =>
                {
                    b.Navigation("Batches");
                });

            modelBuilder.Entity("IGSPharma.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");

                    b.Navigation("Prescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
